// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var VerifierContract = artifacts.require('SquareVerifier');

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps
var fs = require('fs');

var obj = JSON.parse(fs.readFileSync('proof.json', 'utf8'));
var a = obj['proof']['a'];
var a_p = obj['proof']['a_p'];
var b = obj['proof']['b'];
var b_p = obj['proof']['b_p'];
var c = obj['proof']['c'];
var c_p = obj['proof']['c_p'];
var h = obj['proof']['h'];
var k = obj['proof']['k'];
var input = obj['inputs'];

var obj2 = JSON.parse(fs.readFileSync('proof_error.json', 'utf8'));
var a2 = obj2['proof']['a'];
var a_p2 = obj2['proof']['a_p'];
var b2 = obj2['proof']['b'];
var b_p2 = obj2['proof']['b_p'];
var c2 = obj2['proof']['c'];
var c_p2 = obj2['proof']['c_p'];
var h2 = obj2['proof']['h'];
var k2 = obj2['proof']['k'];
var input2 = obj2['inputs'];

contract('TestERC721Mintable', accounts => {

    const account_one = accounts[0];

    describe('Test verification', function () {
        beforeEach(async function () { 
            this.contract = await VerifierContract.new({from: account_one});
        })

        it('correct proof', async function () { 
            let result = await this.contract.verifyTx(a, a_p, b, b_p, c, c_p, h, k, input);
            assert(result, true, "Result should be true");
        })

        it('incorrect proof', async function () { 
            let result = await this.contract.verifyTx(a2, a_p2, b2, b_p2, c2, c_p2, h2, k2, input2);
            assert(result, false, "Result should be false");
        })
    });
})